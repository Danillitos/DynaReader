// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Dados de usuário
model User {
  id                   Int   @id @default(autoincrement())
  username             String   @unique
  email                String   @unique
  password             String

  verifyToken          String?  @unique
  verifySendAt         DateTime?
  verifyTokenExpiresAt DateTime?

  resetToken           String? @unique
  resetTokenExpiresAt  DateTime?
  resetSendAt          DateTime?

  isVerified           Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime? @updatedAt

  // Relacionamentos

  progress       Progress[]
  readerData     ReaderData?
}

// Perfil de leitura do usuário, relação 1:1 com User
model ReaderData {
  id             Int   @id @default(autoincrement())
  dailyGoal      Int?
  streak         Int?
  notificationType String?
  readerType     String?
  averageReading Int?
  User            User @relation(fields: [id], references: [id], onDelete: Cascade)
}

// Livros disponíveis, relação 1:N com Progress
model Book {
  id        Int   @id @default(autoincrement())
  title     String
  author    String
  pages     Int
  progresses Progress[]
}

// Progresso de leitura do usuário, relação N:1 com User e Book
model Progress {
  userID     Int
  bookID     Int
  pagesRead  Int
  timeSpent  Int
  percentage Int
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookID], references: [id])

  @@id([userID, bookID])
}
